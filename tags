!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
L	gsoft.c	/^static lua_State* L = NULL;$/;"	v	file:
MAX_PIPE_BUF	spawn.c	6;"	d	file:
SPAWN_PIPE	spawn.h	/^typedef struct _spawn_pipe_* SPAWN_PIPE;$/;"	t	typeref:struct:_spawn_pipe_
WinMain	gsoft.c	/^int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevInstance, \/\/ $/;"	f
_G_LUA_H_	g_lua.h	2;"	d
_SPAWN_H_	spawn.h	2;"	d
_spawn_pipe_	spawn.c	/^struct _spawn_pipe_$/;"	s	file:
buf	spawn.c	/^	char buf[MAX_PIPE_BUF];$/;"	m	struct:_spawn_pipe_	file:
call_lua	g_lua.c	/^void call_lua(lua_State* L,const char* func,const char* sig,...){$/;"	f
close_socket	gsoft.c	/^static int close_socket(lua_State* L)$/;"	f	file:
create_child	spawn.c	/^static int create_child(const char* cmd,SPAWN_PIPE pipes)$/;"	f	file:
create_spawnpipe	spawn.c	/^SPAWN_PIPE create_spawnpipe()$/;"	f
cur_	spawn.c	/^	int cur_;$/;"	m	struct:_spawn_pipe_	file:
dup_pipes	spawn.c	/^static int dup_pipes(SPAWN_PIPE pipes)$/;"	f	file:
error	g_lua.c	/^void error(lua_State* L,const char* fmt,...)$/;"	f
free_spawnpipe	spawn.c	/^void free_spawnpipe(SPAWN_PIPE pipes)$/;"	f
get_char	spawn.c	/^static int get_char(SPAWN_PIPE pipes)$/;"	f	file:
get_imp	spawn.c	/^static int get_imp(HANDLE in,char* buf,int max,int* cur)$/;"	f	file:
get_line	spawn.c	/^static char* get_line(SPAWN_PIPE pipes,char* buf,int lim)$/;"	f	file:
in	spawn.c	/^	HANDLE in;$/;"	m	struct:_spawn_pipe_	file:
load_main_lua	gsoft.c	/^static void load_main_lua()$/;"	f	file:
lua_new_pipe	spawn.c	/^static int lua_new_pipe(lua_State* L)$/;"	f	file:
lua_open_api	gsoft.c	/^static void lua_open_api(lua_State* L)$/;"	f	file:
lua_pipe_closein	spawn.c	/^static int lua_pipe_closein(lua_State* L)$/;"	f	file:
lua_pipe_closeout	spawn.c	/^static int lua_pipe_closeout(lua_State* L)$/;"	f	file:
lua_pipe_getline	spawn.c	/^static int lua_pipe_getline(lua_State* L)$/;"	f	file:
lua_pipe_print	spawn.c	/^static int lua_pipe_print(lua_State* L)$/;"	f	file:
luaopen_luaext_pipe	spawn.c	/^int luaopen_luaext_pipe(lua_State* L){$/;"	f
luapipe_f	spawn.c	/^static const struct luaL_Reg luapipe_f[] = {$/;"	v	typeref:struct:luaL_Reg	file:
luapipe_m	spawn.c	/^static const struct luaL_Reg luapipe_m[] = {$/;"	v	typeref:struct:luaL_Reg	file:
out	spawn.c	/^	HANDLE out;$/;"	m	struct:_spawn_pipe_	file:
pipe_closein	spawn.c	/^void pipe_closein(SPAWN_PIPE pipes)$/;"	f
pipe_closeout	spawn.c	/^void pipe_closeout(SPAWN_PIPE pipes)$/;"	f
pipe_getline	spawn.c	/^char* pipe_getline(SPAWN_PIPE pipes,char* buf,int max_size)$/;"	f
pipe_printf	spawn.c	/^int pipe_printf(SPAWN_PIPE pipes,const char* format,...)$/;"	f
register_me	gsoft.c	/^int register_me()$/;"	f
send_msg	gsoft.c	/^static int send_msg (lua_State* L)$/;"	f	file:
size_	spawn.c	/^	int size_;$/;"	m	struct:_spawn_pipe_	file:
spawn_child	spawn.c	/^int spawn_child(const char* cmd,SPAWN_PIPE pipes)$/;"	f
tcp_connect	gsoft.c	/^static int tcp_connect(lua_State* L)$/;"	f	file:
trace_out	g_lua.c	/^int trace_out(lua_State* L)$/;"	f
